#!/usr/bin/env python3
"""
Script de test complet pour v√©rifier que le refactoring et l'int√©gration fonctionnent correctement.
Combine les tests de fonctionnalit√© de base, d'int√©gration des tools et de validation compl√®te.
"""
import sys
import os
import json

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models_logic.openrouter_logic import process_tweets_with_openrouter, generate_with_openrouter_tools, execute_tool, get_available_tools

def test_basic_functionality():
    """Test de base pour v√©rifier que les imports et la fonction fonctionnent."""
    print("=== Test de fonctionnalit√© de base ===")
    
    try:
        # Test avec mock=True pour √©viter les appels API
        results = process_tweets_with_openrouter(
            user_or_handle="testuser",
            limit=1,
            model="x-ai/grok-4-fast:free",
            system_instruction="Test system instruction",
            mock=True,
            use_tools=False  # D√©sactiver les tools pour ce test simple
        )
        
        print(f"‚úÖ Fonction process_tweets_with_openrouter fonctionne")
        print(f"Nombre de r√©sultats: {len(results)}")
        if results:
            print(f"Premier r√©sultat: {results[0]['full_text'][:50]}...")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False
    
    return True

def test_tools_integration():
    """Test de l'int√©gration des tools."""
    print("\n=== Test d'int√©gration des tools ===")
    
    try:
        # Test avec tools activ√©s
        results = process_tweets_with_openrouter(
            user_or_handle="testuser",
            limit=1,
            model="x-ai/grok-4-fast:free",
            system_instruction="Extract crypto tickers",
            mock=True,
            use_tools=True
        )
        
        print(f"‚úÖ Fonction avec tools fonctionne")
        print(f"Analyse: {results[0]['analysis'][:100]}..." if results else "Pas de r√©sultats")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test avec tools: {e}")
        return False
    
    return True

def test_tool_definitions():
    """Test de la d√©finition et de l'ex√©cution directe des tools."""
    print("\n=== Test d√©finition des tools ===")
    
    try:
        # Test 1: V√©rifier que les tools sont bien d√©finis
        tools = get_available_tools()
        print(f"‚úÖ Tools disponibles: {len(tools)}")
        
        if tools:
            tool = tools[0]
            print(f"‚úÖ Premier tool: {tool['function']['name']}")
            print(f"‚úÖ Description: {tool['function']['description']}")
        else:
            print("‚ùå Aucun tool disponible")
            return False
        
        # Test 2: Ex√©cuter le tool directement
        test_text = "I'm bullish on BTC, ETH, and SOL today! Also watching DOGE."
        result = execute_tool("extract_crypto_tickers", {"text": test_text})
        print(f"‚úÖ Tool ex√©cut√© avec succ√®s")
        print(f"   Input: '{test_text}'")
        print(f"   Output: {result}")
        
        # Test 3: V√©rifier le format JSON de sortie
        try:
            parsed_result = json.loads(result)
            print(f"‚úÖ Sortie JSON valide: {parsed_result}")
            
            # Test 4: V√©rifier que le contenu est correct
            expected_tickers = {"BTC", "ETH", "SOL", "DOGE"}
            actual_tickers = set(parsed_result)
            if expected_tickers.issubset(actual_tickers):
                print(f"‚úÖ Tickers extraits correctement")
            else:
                print(f"‚ö†Ô∏è  Tickers partiellement extraits: attendu {expected_tickers}, obtenu {actual_tickers}")
            
        except json.JSONDecodeError:
            print(f"‚ùå Sortie JSON invalide: {result}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test des tools: {e}")
        return False
    
    return True

def test_tool_edge_cases():
    """Test des cas limites pour les tools."""
    print("\n=== Test cas limites des tools ===")
    
    test_cases = [
        {
            "text": "",
            "description": "Texte vide"
        },
        {
            "text": "No crypto content here, just regular text",
            "description": "Pas de crypto"
        },
        {
            "text": "THE CEO announced API support",
            "description": "Mots exclus seulement"
        },
        {
            "text": "$BTC, $ETH, and regular BTC ETH mentions",
            "description": "M√©lange $ et mentions normales"
        }
    ]
    
    try:
        for i, case in enumerate(test_cases, 1):
            result = execute_tool("extract_crypto_tickers", {"text": case["text"]})
            parsed_result = json.loads(result)
            print(f"‚úÖ Test {i} ({case['description']}): {parsed_result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests de cas limites: {e}")
        return False

def test_performance():
    """Test de performance avec un texte long."""
    print("\n=== Test de performance ===")
    
    # Cr√©er un texte long avec plusieurs tickers
    long_text = """
    BTC is showing strong momentum today. ETH continues its upward trend.
    SOL, ADA, and DOT are following the market. DOGE remains volatile.
    MATIC and AVAX are consolidating. USDT and USDC maintain stability.
    New projects like SUI and APT gaining attention. DeFi tokens UNI and LINK
    are performing well. Remember to DYOR before investing.
    """ * 20  # R√©p√©ter pour cr√©er un texte plus long
    
    try:
        import time
        start_time = time.time()
        
        result = execute_tool("extract_crypto_tickers", {"text": long_text})
        parsed_result = json.loads(result)
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"‚úÖ Texte long trait√© en {execution_time:.4f}s")
        print(f"‚úÖ Nombre de tickers trouv√©s: {len(parsed_result)}")
        print(f"‚úÖ Tickers: {parsed_result}")
        
        # Le test passe si c'est rapide (< 1 seconde)
        if execution_time < 1.0:
            print(f"‚úÖ Performance satisfaisante")
            return True
        else:
            print(f"‚ö†Ô∏è  Performance lente: {execution_time:.4f}s")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de performance: {e}")
        return False

def run_all_tests():
    """Lance tous les tests de validation."""
    print("üß™ D√âMARRAGE DES TESTS COMPLETS DE REFACTORING ET D'INT√âGRATION")
    print("=" * 70)
    
    tests = [
        ("Fonctionnalit√© de base", test_basic_functionality),
        ("Int√©gration des tools", test_tools_integration),
        ("D√©finition des tools", test_tool_definitions),
        ("Cas limites des tools", test_tool_edge_cases),
        ("Performance", test_performance)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            print(f"\nüîÑ Ex√©cution: {test_name}")
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASS√â")
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
    
    print("\n" + "=" * 70)
    print(f"üìä R√âSULTATS FINAUX: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚úÖ Le refactoring et l'int√©gration fonctionnent parfaitement")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        print("‚ùå V√©rifiez les erreurs ci-dessus")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\nüöÄ Le syst√®me est pr√™t √† √™tre utilis√©!")
    else:
        print("\nüîß Des corrections sont n√©cessaires.")
        sys.exit(1)
